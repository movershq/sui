{
  "openrpc": "1.2.6",
  "info": {
    "title": "Sui JSON-RPC",
    "description": "Sui JSON-RPC API for interaction with the Sui network gateway.",
    "contact": {
      "name": "Mysten Labs",
      "url": "https://mystenlabs.com",
      "email": "build@mystenlabs.com"
    },
    "license": {
      "name": "Apache-2.0",
      "url": "https://raw.githubusercontent.com/MystenLabs/sui/main/LICENSE"
    },
    "version": "0.1.0"
  },
  "methods": [
    {
      "name": "sui_transferCoin",
      "description": "Create a transaction to transfer a Sui coin from one address to another.",
      "params": [
        {
          "name": "signer",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "object_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "recipient",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_moveCall",
      "description": "Execute a Move call transaction by calling the specified function in the module of a given package.",
      "params": [
        {
          "name": "signer",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "package_object_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "module",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "function",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "type_arguments",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TypeTag"
            }
          }
        },
        {
          "name": "arguments",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          }
        },
        {
          "name": "gas",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_publish",
      "description": "Publish Move module.",
      "params": [
        {
          "name": "sender",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "compiled_modules",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Base64"
            }
          }
        },
        {
          "name": "gas",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_splitCoin",
      "description": "",
      "params": [
        {
          "name": "signer",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "coin_object_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "split_amounts",
          "required": true,
          "schema": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint64",
              "minimum": 0.0
            }
          }
        },
        {
          "name": "gas",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_mergeCoins",
      "description": "",
      "params": [
        {
          "name": "signer",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        },
        {
          "name": "primary_coin",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "coin_to_merge",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas",
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        },
        {
          "name": "gas_budget",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "TransactionBytes",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionBytes"
        }
      }
    },
    {
      "name": "sui_executeTransaction",
      "description": "Execute the transaction using the transaction data, signature and public key.",
      "params": [
        {
          "name": "signed_transaction",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SignedTransaction"
          }
        }
      ],
      "result": {
        "name": "TransactionResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionResponse"
        }
      }
    },
    {
      "name": "sui_syncAccountState",
      "description": "Synchronize client state with validators.",
      "params": [
        {
          "name": "address",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "()",
        "required": true,
        "schema": {
          "type": "null"
        }
      }
    },
    {
      "name": "sui_getOwnedObjects",
      "description": "Return the list of objects owned by an address.",
      "params": [
        {
          "name": "owner",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      ],
      "result": {
        "name": "ObjectResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectResponse"
        }
      }
    },
    {
      "name": "sui_getTotalTransactionNumber",
      "description": "",
      "params": [],
      "result": {
        "name": "u64",
        "required": true,
        "schema": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    {
      "name": "sui_getTransactionsInRange",
      "description": "",
      "params": [
        {
          "name": "start",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        },
        {
          "name": "end",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec < (GatewayTxSeqNumber, TransactionDigest) >",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      }
    },
    {
      "name": "sui_getRecentTransactions",
      "description": "",
      "params": [
        {
          "name": "count",
          "required": true,
          "schema": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      ],
      "result": {
        "name": "Vec < (GatewayTxSeqNumber, TransactionDigest) >",
        "required": true,
        "schema": {
          "type": "array",
          "items": {
            "type": "array",
            "items": [
              {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              },
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ],
            "maxItems": 2,
            "minItems": 2
          }
        }
      }
    },
    {
      "name": "sui_getTransaction",
      "description": "",
      "params": [
        {
          "name": "digest",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/TransactionDigest"
          }
        }
      ],
      "result": {
        "name": "TransactionEffectsResponse",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionEffectsResponse"
        }
      }
    },
    {
      "name": "sui_getObjectInfoRaw",
      "description": "Low level API to get object info. Client Applications should prefer to use `get_object_typed_info` instead.",
      "params": [
        {
          "name": "object_id",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/ObjectID"
          }
        }
      ],
      "result": {
        "name": "SuiObjectRead",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/ObjectRead"
        }
      }
    }
  ],
  "components": {
    "contentDescriptors": {},
    "schemas": {
      "AuthorityQuorumSignInfo": {
        "description": "Represents at least a quorum (could be more) of authority signatures.",
        "type": "object",
        "required": [
          "epoch",
          "signatures"
        ],
        "properties": {
          "epoch": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "signatures": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "$ref": "#/components/schemas/PublicKeyBytes"
                },
                {
                  "$ref": "#/components/schemas/AuthoritySignature"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          }
        }
      },
      "AuthoritySignature": {
        "description": "A signature emitted by an authority. It's useful to decouple this from user signatures, as their set of supported schemes will probably diverge",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "Base64": {
        "type": "string"
      },
      "CertifiedTransaction": {
        "type": "object",
        "required": [
          "auth_sign_info",
          "data",
          "transaction_digest",
          "tx_signature"
        ],
        "properties": {
          "auth_sign_info": {
            "description": "authority signature information, if available, is signed by an authority, applied on `data`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/AuthorityQuorumSignInfo"
              }
            ]
          },
          "data": {
            "$ref": "#/components/schemas/TransactionData"
          },
          "transaction_digest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "tx_signature": {
            "description": "tx_signature is signed by the transaction sender, applied on `data`.",
            "allOf": [
              {
                "$ref": "#/components/schemas/Signature"
              }
            ]
          }
        }
      },
      "Coin": {
        "type": "object",
        "required": [
          "id",
          "value"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/VersionedID"
          },
          "value": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Data": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "contents",
              "dataType",
              "type"
            ],
            "properties": {
              "contents": {
                "$ref": "#/components/schemas/MoveValue"
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "moveObject"
                ]
              },
              "type": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "required": [
              "dataType",
              "disassembled"
            ],
            "properties": {
              "dataType": {
                "type": "string",
                "enum": [
                  "package"
                ]
              },
              "disassembled": {
                "type": "object",
                "additionalProperties": true
              }
            }
          }
        ]
      },
      "Event": {
        "type": "object",
        "required": [
          "contents",
          "type_"
        ],
        "properties": {
          "contents": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          },
          "type_": {
            "type": "string"
          }
        }
      },
      "ExecutionStatus": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "Success"
            ],
            "properties": {
              "Success": {
                "type": "object",
                "required": [
                  "gas_cost"
                ],
                "properties": {
                  "gas_cost": {
                    "$ref": "#/components/schemas/GasCostSummary"
                  }
                }
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "Failure"
            ],
            "properties": {
              "Failure": {
                "type": "object",
                "required": [
                  "error",
                  "gas_cost"
                ],
                "properties": {
                  "error": {
                    "type": "string"
                  },
                  "gas_cost": {
                    "$ref": "#/components/schemas/GasCostSummary"
                  }
                }
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "GasCostSummary": {
        "type": "object",
        "required": [
          "computation_cost",
          "storage_cost",
          "storage_rebate"
        ],
        "properties": {
          "computation_cost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storage_cost": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "storage_rebate": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "Hex": {
        "type": "string"
      },
      "InputObjectKind": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "MovePackage"
            ],
            "properties": {
              "MovePackage": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "ImmOrOwnedMoveObject"
            ],
            "properties": {
              "ImmOrOwnedMoveObject": {
                "$ref": "#/components/schemas/ObjectRef"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SharedMoveObject"
            ],
            "properties": {
              "SharedMoveObject": {
                "$ref": "#/components/schemas/ObjectID"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "MergeCoinResponse": {
        "type": "object",
        "required": [
          "certificate",
          "updatedCoin",
          "updatedGas"
        ],
        "properties": {
          "certificate": {
            "description": "Certificate of the transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/CertifiedTransaction"
              }
            ]
          },
          "updatedCoin": {
            "description": "The updated original coin object after merge",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "MoveCall": {
        "type": "object",
        "required": [
          "function",
          "module",
          "package"
        ],
        "properties": {
          "arguments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SuiJsonValue"
            }
          },
          "function": {
            "type": "string"
          },
          "module": {
            "type": "string"
          },
          "package": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "type_arguments": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "MovePackage": {
        "type": "object",
        "required": [
          "disassembled"
        ],
        "properties": {
          "disassembled": {
            "type": "object",
            "additionalProperties": true
          }
        }
      },
      "MoveStruct": {
        "anyOf": [
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "type": "string"
                },
                {
                  "$ref": "#/components/schemas/MoveValue"
                }
              ],
              "maxItems": 2,
              "minItems": 2
            }
          },
          {
            "type": "object",
            "required": [
              "fields",
              "type"
            ],
            "properties": {
              "fields": {
                "type": "object",
                "additionalProperties": {
                  "$ref": "#/components/schemas/MoveValue"
                }
              },
              "type": {
                "type": "string"
              }
            }
          }
        ]
      },
      "MoveValue": {
        "anyOf": [
          {
            "type": "integer",
            "format": "uint8",
            "minimum": 0.0
          },
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "type": "integer",
            "format": "uint128",
            "minimum": 0.0
          },
          {
            "type": "boolean"
          },
          {
            "$ref": "#/components/schemas/ObjectID"
          },
          {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MoveValue"
            }
          },
          {
            "$ref": "#/components/schemas/MoveStruct"
          },
          {
            "$ref": "#/components/schemas/SuiAddress"
          },
          {
            "type": "string"
          },
          {
            "$ref": "#/components/schemas/ObjectID"
          },
          {
            "$ref": "#/components/schemas/ObjectID"
          },
          {
            "$ref": "#/components/schemas/VersionedID"
          },
          {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          {
            "$ref": "#/components/schemas/Base64"
          },
          {
            "$ref": "#/components/schemas/Coin"
          }
        ]
      },
      "Object": {
        "type": "object",
        "required": [
          "data",
          "owner",
          "previousTransaction",
          "reference",
          "storageRebate"
        ],
        "properties": {
          "data": {
            "description": "The meat of the object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Data"
              }
            ]
          },
          "owner": {
            "description": "The owner that unlocks this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/Owner"
              }
            ]
          },
          "previousTransaction": {
            "description": "The digest of the transaction that created or last mutated this object",
            "allOf": [
              {
                "$ref": "#/components/schemas/TransactionDigest"
              }
            ]
          },
          "reference": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "storageRebate": {
            "description": "The amount of SUI we would rebate if this object gets deleted. This number is re-calculated each time the object is mutated based on the present storage gas price.",
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      },
      "ObjectDigest": {
        "$ref": "#/components/schemas/Base64"
      },
      "ObjectID": {
        "$ref": "#/components/schemas/Hex"
      },
      "ObjectRead": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/Object"
              },
              "status": {
                "type": "string",
                "enum": [
                  "Exists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "$ref": "#/components/schemas/ObjectID"
              },
              "status": {
                "type": "string",
                "enum": [
                  "NotExists"
                ]
              }
            }
          },
          {
            "type": "object",
            "required": [
              "details",
              "status"
            ],
            "properties": {
              "details": {
                "type": "array",
                "items": [
                  {
                    "$ref": "#/components/schemas/ObjectID"
                  },
                  {
                    "$ref": "#/components/schemas/SequenceNumber"
                  },
                  {
                    "$ref": "#/components/schemas/ObjectDigest"
                  }
                ],
                "maxItems": 3,
                "minItems": 3
              },
              "status": {
                "type": "string",
                "enum": [
                  "Deleted"
                ]
              }
            }
          }
        ]
      },
      "ObjectRef": {
        "type": "object",
        "required": [
          "digest",
          "objectId",
          "version"
        ],
        "properties": {
          "digest": {
            "description": "Base64 string representing the object digest",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectDigest"
              }
            ]
          },
          "objectId": {
            "description": "Hex code as string representing the object id",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectID"
              }
            ]
          },
          "version": {
            "description": "Object version.",
            "allOf": [
              {
                "$ref": "#/components/schemas/SequenceNumber"
              }
            ]
          }
        }
      },
      "ObjectResponse": {
        "type": "object",
        "required": [
          "objects"
        ],
        "properties": {
          "objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "Owner": {
        "oneOf": [
          {
            "type": "string",
            "enum": [
              "Shared",
              "Immutable"
            ]
          },
          {
            "description": "Object is exclusively owned by a single address, and is mutable.",
            "type": "object",
            "required": [
              "AddressOwner"
            ],
            "properties": {
              "AddressOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Object is exclusively owned by a single object, and is mutable. The object ID is converted to SuiAddress as SuiAddress is universal.",
            "type": "object",
            "required": [
              "ObjectOwner"
            ],
            "properties": {
              "ObjectOwner": {
                "$ref": "#/components/schemas/SuiAddress"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "PublicKeyBytes": {
        "$ref": "#/components/schemas/Base64"
      },
      "PublishResponse": {
        "type": "object",
        "required": [
          "certificate",
          "created_objects",
          "package",
          "updated_gas"
        ],
        "properties": {
          "certificate": {
            "description": "Certificate of the transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/CertifiedTransaction"
              }
            ]
          },
          "created_objects": {
            "description": "List of Move objects created as part of running the module initializers in the package",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object"
            }
          },
          "package": {
            "description": "The newly published package object reference.",
            "allOf": [
              {
                "$ref": "#/components/schemas/ObjectRef"
              }
            ]
          },
          "updated_gas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SequenceNumber": {
        "type": "integer",
        "format": "uint64",
        "minimum": 0.0
      },
      "Signature": {
        "$ref": "#/components/schemas/Base64"
      },
      "SignedTransaction": {
        "type": "object",
        "required": [
          "pub_key",
          "signature",
          "tx_bytes"
        ],
        "properties": {
          "pub_key": {
            "$ref": "#/components/schemas/Base64"
          },
          "signature": {
            "$ref": "#/components/schemas/Base64"
          },
          "tx_bytes": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "SplitCoinResponse": {
        "type": "object",
        "required": [
          "certificate",
          "newCoins",
          "updatedCoin",
          "updatedGas"
        ],
        "properties": {
          "certificate": {
            "description": "Certificate of the transaction",
            "allOf": [
              {
                "$ref": "#/components/schemas/CertifiedTransaction"
              }
            ]
          },
          "newCoins": {
            "description": "All the newly created coin objects generated from the split",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Object"
            }
          },
          "updatedCoin": {
            "description": "The updated original coin object after split",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          },
          "updatedGas": {
            "description": "The updated gas payment object after deducting payment",
            "allOf": [
              {
                "$ref": "#/components/schemas/Object"
              }
            ]
          }
        }
      },
      "SuiAddress": {
        "$ref": "#/components/schemas/Hex"
      },
      "SuiJsonValue": {},
      "TransactionBytes": {
        "type": "object",
        "required": [
          "gas",
          "input_objects",
          "tx_bytes"
        ],
        "properties": {
          "gas": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "input_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InputObjectKind"
            }
          },
          "tx_bytes": {
            "$ref": "#/components/schemas/Base64"
          }
        }
      },
      "TransactionData": {
        "type": "object",
        "required": [
          "gas_budget",
          "gas_payment",
          "sender",
          "transactions"
        ],
        "properties": {
          "gas_budget": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "gas_payment": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "sender": {
            "$ref": "#/components/schemas/SuiAddress"
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TransactionKind"
            }
          }
        }
      },
      "TransactionDigest": {
        "description": "A transaction will have a (unique) digest.",
        "allOf": [
          {
            "$ref": "#/components/schemas/Base64"
          }
        ]
      },
      "TransactionEffects": {
        "description": "The response from processing a transaction or a certified transaction",
        "type": "object",
        "required": [
          "gas_object",
          "status",
          "transaction_digest"
        ],
        "properties": {
          "created": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "deleted": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "dependencies": {
            "description": "The set of transaction digests this transaction depends on.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "events": {
            "description": "The events emitted during execution. Note that only successful transactions emit events",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "gas_object": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "mutated": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "shared_objects": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "status": {
            "$ref": "#/components/schemas/ExecutionStatus"
          },
          "transaction_digest": {
            "$ref": "#/components/schemas/TransactionDigest"
          },
          "unwrapped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          },
          "wrapped": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ObjectRef"
            }
          }
        }
      },
      "TransactionEffectsResponse": {
        "type": "object",
        "required": [
          "certificate",
          "effects"
        ],
        "properties": {
          "certificate": {
            "$ref": "#/components/schemas/CertifiedTransaction"
          },
          "effects": {
            "$ref": "#/components/schemas/TransactionEffects"
          }
        }
      },
      "TransactionKind": {
        "oneOf": [
          {
            "description": "Initiate a coin transfer between addresses",
            "type": "object",
            "required": [
              "TransferCoin"
            ],
            "properties": {
              "TransferCoin": {
                "$ref": "#/components/schemas/TransferCoin"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Publish a new Move module",
            "type": "object",
            "required": [
              "Publish"
            ],
            "properties": {
              "Publish": {
                "$ref": "#/components/schemas/MovePackage"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Call a function in a published Move module",
            "type": "object",
            "required": [
              "Call"
            ],
            "properties": {
              "Call": {
                "$ref": "#/components/schemas/MoveCall"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransactionResponse": {
        "oneOf": [
          {
            "type": "object",
            "required": [
              "EffectResponse"
            ],
            "properties": {
              "EffectResponse": {
                "$ref": "#/components/schemas/TransactionEffectsResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "PublishResponse"
            ],
            "properties": {
              "PublishResponse": {
                "$ref": "#/components/schemas/PublishResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "MergeCoinResponse"
            ],
            "properties": {
              "MergeCoinResponse": {
                "$ref": "#/components/schemas/MergeCoinResponse"
              }
            },
            "additionalProperties": false
          },
          {
            "type": "object",
            "required": [
              "SplitCoinResponse"
            ],
            "properties": {
              "SplitCoinResponse": {
                "$ref": "#/components/schemas/SplitCoinResponse"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "TransferCoin": {
        "type": "object",
        "required": [
          "object_ref",
          "recipient"
        ],
        "properties": {
          "object_ref": {
            "$ref": "#/components/schemas/ObjectRef"
          },
          "recipient": {
            "$ref": "#/components/schemas/SuiAddress"
          }
        }
      },
      "TypeTag": {
        "type": "string"
      },
      "VersionedID": {
        "description": "Rust version of the Move Sui::ID::VersionedID type",
        "type": "object",
        "required": [
          "id",
          "version"
        ],
        "properties": {
          "id": {
            "$ref": "#/components/schemas/ObjectID"
          },
          "version": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          }
        }
      }
    }
  }
}
